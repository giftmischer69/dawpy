# coding: utf-8

"""
    dawpy server

    This is the daw server api  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_pattern_to_song_map_playlist_add_index_pattern_name_post(self, pattern_name, index, **kwargs):  # noqa: E501
        """Add Pattern To Song Map  # noqa: E501

        add pattern to songmap at index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pattern_to_song_map_playlist_add_index_pattern_name_post(pattern_name, index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern_name: (required)
        :param int index: (required)
        :return: Pattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_pattern_to_song_map_playlist_add_index_pattern_name_post_with_http_info(pattern_name, index, **kwargs)  # noqa: E501
        else:
            (data) = self.add_pattern_to_song_map_playlist_add_index_pattern_name_post_with_http_info(pattern_name, index, **kwargs)  # noqa: E501
            return data

    def add_pattern_to_song_map_playlist_add_index_pattern_name_post_with_http_info(self, pattern_name, index, **kwargs):  # noqa: E501
        """Add Pattern To Song Map  # noqa: E501

        add pattern to songmap at index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pattern_to_song_map_playlist_add_index_pattern_name_post_with_http_info(pattern_name, index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern_name: (required)
        :param int index: (required)
        :return: Pattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pattern_name', 'index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_pattern_to_song_map_playlist_add_index_pattern_name_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pattern_name' is set
        if ('pattern_name' not in params or
                params['pattern_name'] is None):
            raise ValueError("Missing the required parameter `pattern_name` when calling `add_pattern_to_song_map_playlist_add_index_pattern_name_post`")  # noqa: E501
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `add_pattern_to_song_map_playlist_add_index_pattern_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pattern_name' in params:
            path_params['pattern_name'] = params['pattern_name']  # noqa: E501
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/playlist/add/{index}/{pattern_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pattern',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configure_pattern_pattern_pattern_name_patch(self, pattern_name, **kwargs):  # noqa: E501
        """Configure Pattern  # noqa: E501

        Configure Pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_pattern_pattern_pattern_name_patch(pattern_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern_name: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configure_pattern_pattern_pattern_name_patch_with_http_info(pattern_name, **kwargs)  # noqa: E501
        else:
            (data) = self.configure_pattern_pattern_pattern_name_patch_with_http_info(pattern_name, **kwargs)  # noqa: E501
            return data

    def configure_pattern_pattern_pattern_name_patch_with_http_info(self, pattern_name, **kwargs):  # noqa: E501
        """Configure Pattern  # noqa: E501

        Configure Pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_pattern_pattern_pattern_name_patch_with_http_info(pattern_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern_name: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pattern_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_pattern_pattern_pattern_name_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pattern_name' is set
        if ('pattern_name' not in params or
                params['pattern_name'] is None):
            raise ValueError("Missing the required parameter `pattern_name` when calling `configure_pattern_pattern_pattern_name_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pattern_name' in params:
            path_params['pattern_name'] = params['pattern_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pattern/{pattern_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configure_plugin_plugin_plugin_name_patch(self, plugin_name, **kwargs):  # noqa: E501
        """Configure Plugin  # noqa: E501

        Configure Plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_plugin_plugin_plugin_name_patch(plugin_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str plugin_name: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configure_plugin_plugin_plugin_name_patch_with_http_info(plugin_name, **kwargs)  # noqa: E501
        else:
            (data) = self.configure_plugin_plugin_plugin_name_patch_with_http_info(plugin_name, **kwargs)  # noqa: E501
            return data

    def configure_plugin_plugin_plugin_name_patch_with_http_info(self, plugin_name, **kwargs):  # noqa: E501
        """Configure Plugin  # noqa: E501

        Configure Plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_plugin_plugin_plugin_name_patch_with_http_info(plugin_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str plugin_name: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_plugin_plugin_plugin_name_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_name' is set
        if ('plugin_name' not in params or
                params['plugin_name'] is None):
            raise ValueError("Missing the required parameter `plugin_name` when calling `configure_plugin_plugin_plugin_name_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_name' in params:
            path_params['plugin_name'] = params['plugin_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/plugin/{plugin_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_pattern_pattern_post(self, body, **kwargs):  # noqa: E501
        """Create Pattern  # noqa: E501

        create a new pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pattern_pattern_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Pattern body: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_pattern_pattern_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_pattern_pattern_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_pattern_pattern_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Pattern  # noqa: E501

        create a new pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pattern_pattern_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Pattern body: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pattern_pattern_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_pattern_pattern_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pattern', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_playlist_playlist_post(self, body, **kwargs):  # noqa: E501
        """Create Playlist  # noqa: E501

        create a new playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_playlist_playlist_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Playlist body: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_playlist_playlist_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_playlist_playlist_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_playlist_playlist_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Playlist  # noqa: E501

        create a new playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_playlist_playlist_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Playlist body: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_playlist_playlist_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_playlist_playlist_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/playlist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pattern_by_name_pattern_pattern_name_get(self, pattern_name, **kwargs):  # noqa: E501
        """Get Pattern By Name  # noqa: E501

        Get pattern by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pattern_by_name_pattern_pattern_name_get(pattern_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern_name: (required)
        :return: Pattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pattern_by_name_pattern_pattern_name_get_with_http_info(pattern_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pattern_by_name_pattern_pattern_name_get_with_http_info(pattern_name, **kwargs)  # noqa: E501
            return data

    def get_pattern_by_name_pattern_pattern_name_get_with_http_info(self, pattern_name, **kwargs):  # noqa: E501
        """Get Pattern By Name  # noqa: E501

        Get pattern by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pattern_by_name_pattern_pattern_name_get_with_http_info(pattern_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern_name: (required)
        :return: Pattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pattern_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pattern_by_name_pattern_pattern_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pattern_name' is set
        if ('pattern_name' not in params or
                params['pattern_name'] is None):
            raise ValueError("Missing the required parameter `pattern_name` when calling `get_pattern_by_name_pattern_pattern_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pattern_name' in params:
            path_params['pattern_name'] = params['pattern_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pattern/{pattern_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pattern',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_playlist_daw_get(self, **kwargs):  # noqa: E501
        """Get Playlist  # noqa: E501

        get current playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_playlist_daw_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Daw
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_playlist_daw_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_playlist_daw_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_playlist_daw_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Playlist  # noqa: E501

        get current playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_playlist_daw_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Daw
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_playlist_daw_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/daw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Daw',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_plugin_by_name_plugin_plugin_name_get(self, plugin_name, **kwargs):  # noqa: E501
        """Get Plugin By Name  # noqa: E501

        Get plugin by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plugin_by_name_plugin_plugin_name_get(plugin_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str plugin_name: (required)
        :return: Plugin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_plugin_by_name_plugin_plugin_name_get_with_http_info(plugin_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_plugin_by_name_plugin_plugin_name_get_with_http_info(plugin_name, **kwargs)  # noqa: E501
            return data

    def get_plugin_by_name_plugin_plugin_name_get_with_http_info(self, plugin_name, **kwargs):  # noqa: E501
        """Get Plugin By Name  # noqa: E501

        Get plugin by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plugin_by_name_plugin_plugin_name_get_with_http_info(plugin_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str plugin_name: (required)
        :return: Plugin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plugin_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_plugin_by_name_plugin_plugin_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plugin_name' is set
        if ('plugin_name' not in params or
                params['plugin_name'] is None):
            raise ValueError("Missing the required parameter `plugin_name` when calling `get_plugin_by_name_plugin_plugin_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plugin_name' in params:
            path_params['plugin_name'] = params['plugin_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/plugin/{plugin_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Plugin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_plugins_plugin_get(self, **kwargs):  # noqa: E501
        """Get Plugins  # noqa: E501

        get registered plugins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plugins_plugin_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Plugin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_plugins_plugin_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_plugins_plugin_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_plugins_plugin_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Plugins  # noqa: E501

        get registered plugins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plugins_plugin_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Plugin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_plugins_plugin_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/plugin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Plugin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_plugin_plugin_post(self, body, **kwargs):  # noqa: E501
        """Register Plugin  # noqa: E501

        register a new plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_plugin_plugin_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Plugin body: (required)
        :return: Daw
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_plugin_plugin_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_plugin_plugin_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_plugin_plugin_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register Plugin  # noqa: E501

        register a new plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_plugin_plugin_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Plugin body: (required)
        :return: Daw
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_plugin_plugin_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_plugin_plugin_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/plugin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Daw',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_playlist_daw_render_get(self, **kwargs):  # noqa: E501
        """Render Playlist  # noqa: E501

        render current playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_playlist_daw_render_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_playlist_daw_render_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.render_playlist_daw_render_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def render_playlist_daw_render_get_with_http_info(self, **kwargs):  # noqa: E501
        """Render Playlist  # noqa: E501

        render current playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_playlist_daw_render_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_playlist_daw_render_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/daw/render', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_playlist_daw_save_get(self, **kwargs):  # noqa: E501
        """save playlist  # noqa: E501

        save current playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_playlist_daw_save_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_playlist_daw_save_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.save_playlist_daw_save_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def save_playlist_daw_save_get_with_http_info(self, **kwargs):  # noqa: E501
        """save playlist  # noqa: E501

        save current playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_playlist_daw_save_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_playlist_daw_save_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/daw/save', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pattern_pattern_pattern_name_put(self, pattern_name, **kwargs):  # noqa: E501
        """Update Pattern  # noqa: E501

        update a pattern by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pattern_pattern_pattern_name_put(pattern_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern_name: (required)
        :return: Pattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pattern_pattern_pattern_name_put_with_http_info(pattern_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pattern_pattern_pattern_name_put_with_http_info(pattern_name, **kwargs)  # noqa: E501
            return data

    def update_pattern_pattern_pattern_name_put_with_http_info(self, pattern_name, **kwargs):  # noqa: E501
        """Update Pattern  # noqa: E501

        update a pattern by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pattern_pattern_pattern_name_put_with_http_info(pattern_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern_name: (required)
        :return: Pattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pattern_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pattern_pattern_pattern_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pattern_name' is set
        if ('pattern_name' not in params or
                params['pattern_name'] is None):
            raise ValueError("Missing the required parameter `pattern_name` when calling `update_pattern_pattern_pattern_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pattern_name' in params:
            path_params['pattern_name'] = params['pattern_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pattern/{pattern_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pattern',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
