# coding: utf-8

"""
    dawpy server

    This is the daw server api  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Playlist(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'bpm': 'int',
        'patterns': 'list[Pattern]',
        'playlist_dict': 'SongMap'
    }

    attribute_map = {
        'name': 'name',
        'bpm': 'bpm',
        'patterns': 'patterns',
        'playlist_dict': 'playlist_dict'
    }

    def __init__(self, name=None, bpm=None, patterns=None, playlist_dict=None):  # noqa: E501
        """Playlist - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._bpm = None
        self._patterns = None
        self._playlist_dict = None
        self.discriminator = None
        self.name = name
        self.bpm = bpm
        if patterns is not None:
            self.patterns = patterns
        if playlist_dict is not None:
            self.playlist_dict = playlist_dict

    @property
    def name(self):
        """Gets the name of this Playlist.  # noqa: E501


        :return: The name of this Playlist.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Playlist.


        :param name: The name of this Playlist.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def bpm(self):
        """Gets the bpm of this Playlist.  # noqa: E501


        :return: The bpm of this Playlist.  # noqa: E501
        :rtype: int
        """
        return self._bpm

    @bpm.setter
    def bpm(self, bpm):
        """Sets the bpm of this Playlist.


        :param bpm: The bpm of this Playlist.  # noqa: E501
        :type: int
        """
        if bpm is None:
            raise ValueError("Invalid value for `bpm`, must not be `None`")  # noqa: E501

        self._bpm = bpm

    @property
    def patterns(self):
        """Gets the patterns of this Playlist.  # noqa: E501


        :return: The patterns of this Playlist.  # noqa: E501
        :rtype: list[Pattern]
        """
        return self._patterns

    @patterns.setter
    def patterns(self, patterns):
        """Sets the patterns of this Playlist.


        :param patterns: The patterns of this Playlist.  # noqa: E501
        :type: list[Pattern]
        """

        self._patterns = patterns

    @property
    def playlist_dict(self):
        """Gets the playlist_dict of this Playlist.  # noqa: E501


        :return: The playlist_dict of this Playlist.  # noqa: E501
        :rtype: SongMap
        """
        return self._playlist_dict

    @playlist_dict.setter
    def playlist_dict(self, playlist_dict):
        """Sets the playlist_dict of this Playlist.


        :param playlist_dict: The playlist_dict of this Playlist.  # noqa: E501
        :type: SongMap
        """

        self._playlist_dict = playlist_dict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Playlist, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Playlist):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
