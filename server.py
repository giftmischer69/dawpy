# generated by fastapi-codegen:
#   filename:  swagger.yaml
#   timestamp: 2021-01-15T11:04:18+00:00

from __future__ import annotations

from typing import List

from fastapi import FastAPI
from fastapi.logger import logger

from models import Daw, Pattern, Playlist, Plugin

import uvicorn

import yaml

app = FastAPI(
    title='dawpy server',
    description='This is the daw server api',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    version='0.1.0',
)

daw: Daw = Daw()


@app.get('/', response_model=Daw)
def get_root() -> Daw:
    """
    get current daw state
    """
    logger.warn(daw.__dict__)
    return daw


@app.get('/daw', response_model=Daw)
def get_daw() -> Daw:
    """
    get current daw state
    """
    return daw


# TODO
@app.get('/daw/render', response_model=str)
def render_playlist() -> str:
    """
    render current playlist
    """
    pass


@app.get('/playlist/load/{playlist_name}', response_model=None)
def save_playlist(playlist_name: str) -> None:
    """
    save current daw state
    """
    file_name = f"data\\projects\\{playlist_name}.yaml"
    with open(file_name, "r") as f:
        daw.playlist = yaml.load(f.read())


@app.get('/playlist/save', response_model=str)
def save_playlist() -> str:
    """
    save current daw state
    """
    file_name = f"data\\projects\\{daw.playlist.name}.yaml"
    with open(file_name, "w") as f:
        f.write(yaml.dump(daw.playlist))
    return file_name


@app.get('/playlist', response_model=Playlist)
def get_current_playlist() -> Playlist:
    """
    get current playlist
    """
    return daw.playlist


@app.post('/playlist', response_model=None)
def create_playlist(body: Playlist) -> None:
    """
    create a new playlist
    """
    daw.playlist = body


@app.post('/playlist/add/{index}/{pattern_name}', response_model=Pattern)
def add_pattern_to_song_map(pattern_name: str, index: int) -> Pattern:
    """
    add pattern to songmap at index
    """
    p: Pattern = daw.get_pattern_by_name(pattern_name)
    idx = str(index).ljust(3)
    if daw.playlist.playlist_dict.dict.get(idx) is None:
        daw.playlist.playlist_dict.dict[idx] = []

    daw.playlist.playlist_dict.dict[idx].append[p]


@app.post('/pattern', response_model=None)
def create_pattern(body: Pattern) -> None:
    """
    create a new pattern
    """
    daw.playlist.patterns.append(body)


@app.get('/pattern/{pattern_name}', response_model=Pattern)
def get_pattern_by_name(pattern_name: str) -> Pattern:
    """
    Get pattern by name
    """
    return daw.get_pattern_by_name(pattern_name)


@app.put('/pattern/{pattern_name}', response_model=Pattern)
def update_pattern(pattern_name: str, body: Pattern) -> None:
    """
    update a pattern by name
    """
    daw.playlist.patterns = [body if body.name == p.name else p for p in daw.playlist.patterns]


# TODO (check if needed)
@app.patch('/pattern/{pattern_name}', response_model=None)
def configure_pattern(pattern_name: str) -> None:
    """
    Configure Pattern
    """
    pass


@app.get('/plugin', response_model=List[Plugin])
def get_plugins() -> List[Plugin]:
    """
    get registered plugins
    """
    return daw.registered_plugins


@app.post('/plugin', response_model=Daw)
def register_plugin(body: Plugin) -> None:
    """
    register a new plugin
    """
    logger.warn(f"registering Plugin {body.__dict__}")
    daw.register_plugin(body)
    return daw


@app.get('/plugin/{plugin_name}', response_model=Plugin)
def get_plugin_by_name(plugin_name: str) -> Plugin:
    """
    Get plugin by name
    """
    return daw.get_plugin_by_name(plugin_name)


# TODO
@app.patch('/plugin/{plugin_name}', response_model=None)
def configure_plugin(plugin_name: str) -> None:
    """
    Configure Plugin
    """
    pass


if __name__ == '__main__':
    uvicorn.run(app, reload=True)
