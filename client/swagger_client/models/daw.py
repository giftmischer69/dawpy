# coding: utf-8

"""
    dawpy server

    This is the daw server api  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Daw(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'daw_config_folder': 'str',
        'daw_config': 'DawConfig',
        'playlist': 'Playlist',
        'registered_plugins': 'list[Plugin]'
    }

    attribute_map = {
        'daw_config_folder': 'daw_config_folder',
        'daw_config': 'daw_config',
        'playlist': 'playlist',
        'registered_plugins': 'registered_plugins'
    }

    def __init__(self, daw_config_folder=None, daw_config=None, playlist=None, registered_plugins=None):  # noqa: E501
        """Daw - a model defined in Swagger"""  # noqa: E501
        self._daw_config_folder = None
        self._daw_config = None
        self._playlist = None
        self._registered_plugins = None
        self.discriminator = None
        if daw_config_folder is not None:
            self.daw_config_folder = daw_config_folder
        if daw_config is not None:
            self.daw_config = daw_config
        if playlist is not None:
            self.playlist = playlist
        if registered_plugins is not None:
            self.registered_plugins = registered_plugins

    @property
    def daw_config_folder(self):
        """Gets the daw_config_folder of this Daw.  # noqa: E501


        :return: The daw_config_folder of this Daw.  # noqa: E501
        :rtype: str
        """
        return self._daw_config_folder

    @daw_config_folder.setter
    def daw_config_folder(self, daw_config_folder):
        """Sets the daw_config_folder of this Daw.


        :param daw_config_folder: The daw_config_folder of this Daw.  # noqa: E501
        :type: str
        """

        self._daw_config_folder = daw_config_folder

    @property
    def daw_config(self):
        """Gets the daw_config of this Daw.  # noqa: E501


        :return: The daw_config of this Daw.  # noqa: E501
        :rtype: DawConfig
        """
        return self._daw_config

    @daw_config.setter
    def daw_config(self, daw_config):
        """Sets the daw_config of this Daw.


        :param daw_config: The daw_config of this Daw.  # noqa: E501
        :type: DawConfig
        """

        self._daw_config = daw_config

    @property
    def playlist(self):
        """Gets the playlist of this Daw.  # noqa: E501


        :return: The playlist of this Daw.  # noqa: E501
        :rtype: Playlist
        """
        return self._playlist

    @playlist.setter
    def playlist(self, playlist):
        """Sets the playlist of this Daw.


        :param playlist: The playlist of this Daw.  # noqa: E501
        :type: Playlist
        """

        self._playlist = playlist

    @property
    def registered_plugins(self):
        """Gets the registered_plugins of this Daw.  # noqa: E501


        :return: The registered_plugins of this Daw.  # noqa: E501
        :rtype: list[Plugin]
        """
        return self._registered_plugins

    @registered_plugins.setter
    def registered_plugins(self, registered_plugins):
        """Sets the registered_plugins of this Daw.


        :param registered_plugins: The registered_plugins of this Daw.  # noqa: E501
        :type: list[Plugin]
        """

        self._registered_plugins = registered_plugins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Daw, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Daw):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
