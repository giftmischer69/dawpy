import sys
from java.io import File, FileOutputStream
from javax.sound.midi import MidiSystem

sys.path.append("lib\\jfugue-5.0.9.jar")

from org.jfugue.midi import MidiParser
from org.jfugue.midi import MidiFileManager
from org.jfugue.pattern import Pattern
from org.jfugue.player import Player
from org.staccato import StaccatoParserListener


class Command:
    CONVERT = (
        "convert",
        'convert ["jfugue_str"] [midi_file_path]',
        "converts the jfugue string to a midi file",
    )


def usage():
    print("Usage: jython jython_jfugue_cli.py [command] [options]")
    print("Commands: ")
    # TODO loop Command print with ljust/rjust
    for x in vars(Command).items():
        if "__" not in x[0]:
            command = x[1]
            cmd_str = command[0]
            cmd_usg = command[1]
            cmd_desc = command[2]
            print(
                "\t"
                + cmd_str.ljust(10, " ")
                + " | "
                + cmd_usg.ljust(45, " ")
                + " | "
                + cmd_desc
            )


def main():
    args = sys.argv[1:]
    print(args)
    if len(args) <= 1 or "-h" in args or "--help" in args:
        usage()
        exit(0)

    cmd = args[0]
    if cmd == Command.CONVERT[0]:
        jfugue_str = Pattern(args[1])
        midi_file = File(args[2])
        print("converting " + jfugue_str.toString() + " to midi file " + midi_file.toString())
        MidiFileManager.savePatternToMidi(jfugue_str, midi_file)
    else:
        usage()
        exit(0)


if __name__ == "__main__":
    main()
